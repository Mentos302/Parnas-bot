import { Markup } from "telegraf";
import { ITelegrafContext } from "../interfaces/ITelegrafContext";
const Extra = require("telegraf/extra");

class AppointmentContoroller {
  isNewClient(ctx: ITelegrafContext) {
    ctx.reply(
      "–í–∏ —Ä–∞–Ω—ñ—à–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—è –≤ –Ω–∞—à—ñ–π –∫–ª—ñ–Ω—ñ—Ü—ñ?",
      Extra.HTML().markup((m: Markup<any>) =>
        m.inlineKeyboard([
          [m.callbackButton("–¢–∞–∫", "yes"), m.callbackButton("–ù—ñ", "no")],
        ])
      )
    );
  }

  resInNewClient(ctx: ITelegrafContext) {
    const isNewClient = String(ctx.match) === "no";

    ctx.scene.enter("appointment-name", { isNewClient });
  }

  reqName(ctx: ITelegrafContext) {
    ctx.reply("–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ —ñ–º'—è <b>(–ü.–Ü.–ë)</b> üë§", Extra.HTML());
  }

  resName(ctx: ITelegrafContext) {
    ctx.scene.enter("appointment-phone", {
      ...ctx.scene.state,
      name: ctx.message?.text,
    });
  }

  reqPhone(ctx: ITelegrafContext) {
    ctx.reply(
      "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –í–∞–º–∏ üìû",
      Extra.HTML().markup((m: Markup<any>) =>
        m
          .keyboard([m.contactRequestButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")])
          .resize()
      )
    );
  }

  async resPhone(ctx: ITelegrafContext) {
    const { isNewClient, name } = ctx.scene.state;
    ctx.reply(
      "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ª–∏—à–∏–ª–∏ –∑–∞—è–≤–∫—É, –æ—á—ñ–∫—É–π—Ç–µ –∑ –í–∞–º–∏ –∑–≤'—è–∂–∫—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      Extra.HTML().markup((m: Markup<any>) =>
        m.inlineKeyboard([[m.callbackButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", "any")]])
      )
    );

    const phone = ctx.message?.contact
      ? ctx.message?.contact.phone_number
      : ctx.message?.text;

    ctx.telegram.sendMessage(
      process.env.ADMIN_ID!,
      `–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–π–æ–º –≤—ñ–¥ <a href="tg://user?id=${ctx.from?.id}">${
        ctx.from?.first_name
      }</a>\n\n<b>–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç:</b> <code>${
        isNewClient ? "–¢–∞–∫" : "–ù—ñ"
      }</code>\n<b>–ü.–Ü.–ë:</b> <code>${name}</code>\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>`,
      Extra.HTML()
    );

    ctx.scene.leave();
  }

  reEnter(ctx: ITelegrafContext) {
    ctx.scene.reenter();
  }
}

export default new AppointmentContoroller();
